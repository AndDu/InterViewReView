全局单例，Application的生命周期是最长的,整个应用的生命周期即Application的生命周期



onTrimMemory():（在这里释放内存也是一种进程保活的手段。）

        通知 应用程序 当前内存使用情况（以内存级别进行识别）
        应用场景：根据当前内存使用情况进行自身的内存资源的不同程度释放，以避免被系统直接杀掉 & 优化应用程序的性能体验
        系统在内存不足时会按照LRU Cache中从低到高杀死进程；优先杀死占用内存较高的应用
                若应用占用内存较小 = 被杀死几率降低，从而快速启动（即热启动 = 启动速度快）
        可回收的资源包括：
        a. 缓存，如文件缓存，图片缓存
        b. 动态生成 & 添加的View

    特别注意：onTrimMemory()中的TRIM_MEMORY_UI_HIDDEN与onStop（）的关系

    onTrimMemory()中的TRIM_MEMORY_UI_HIDDEN的回调时刻：当应用程序中的所有UI组件全部不可见时
    Activity的onStop（）回调时刻：当一个Activity完全不可见的时候
    使用建议：
    在 onStop（）中释放与 Activity相关的资源，如取消网络连接或者注销广播接收器等
    在onTrimMemory()中的TRIM_MEMORY_UI_HIDDEN中释放与UI相关的资源，从而保证用户在使用应用程序过程中，UI相关的资源不需要重新加载，从而提升响应速度

    注：onTrimMemory的TRIM_MEMORY_UI_HIDDEN等级是在onStop（）方法之前调用的

    包含这个方法的类、、
    Application.onTrimMemory()
    Activity.onTrimMemory()
    Fragment.OnTrimMemory()
    Service.onTrimMemory()
    ContentProvider.OnTrimMemory()

onLowMemory()

    作用：监听 Android系统整体内存较低时刻
    调用时刻：Android系统整体内存较低时
    应用场景：Android 4.0前 检测内存使用情况，从而避免被系统直接杀掉 & 优化应用程序的性能体验
    类似于 OnTrimMemory（）
    特别注意：OnTrimMemory（） &  OnLowMemory（） 关系

    1.OnTrimMemory（）是 OnLowMemory（） Android 4.0后的替代 API
    2.OnLowMemory（） =  OnTrimMemory（）中的TRIM_MEMORY_COMPLETE级别
    3.若想兼容Android 4.0前，请使用OnLowMemory（）；否则直接使用OnTrimMemory（）即可

onConfigurationChanged（）

    作用：监听 应用程序 配置信息的改变，如屏幕旋转等
    调用时刻：应用程序配置信息 改变时调用
    该配置信息是指 ：Manifest.xml文件下的 Activity标签属性android:configChanges的值


 registerActivityLifecycleCallbacks（） & unregisterActivityLifecycleCallbacks（）

    作用：注册 / 注销对 应用程序内 所有Activity的生命周期监听
    调用时刻：当应用程序内 Activity生命周期发生变化时就会调用
    实际上是调用registerActivityLifecycleCallbacks（）里 ActivityLifecycleCallbacks接口里的方法

onTerminate（）
    调用时刻：应用程序结束时调用
    但该方法只用于Android仿真机测试，在Android产品机是不会调用的

从Applicaiton类的方法可以看出，Applicaiton类的应用场景有：（已按优先级排序）

1.初始化 应用程序级别 的资源，如全局对象、环境配置变量等
2.数据共享、数据缓存，如设置全局共享变量、方法等
3.获取应用程序当前的内存使用情况，及时释放资源，从而避免被系统杀死
4.监听 应用程序 配置信息的改变，如屏幕旋转等
5.监听应用程序内 所有Activity的生命周期


